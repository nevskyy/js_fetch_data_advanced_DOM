{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","request","url","fetch","then","response","ok","Promise","reject","Error","status","statusText","json","getPhones","getDetailsOfPhone","phoneId","displayMessage","divClassName","header","array","div","document","createElement","h3","ul","className","textContent","append","forEach","el","li","id","toUpperCase","name","body","getFirstReceivedDetails","arr","race","map","phone","getAllSuccessfulDetails","all","result","console","log","catch","error","warn"],"mappings":";AAAA,aAIA,IAAMA,EAAW,4DAEXC,EAAU,SAACC,GACRC,OAAAA,MAASH,GAAAA,OAAAA,GAAWE,OAAAA,IACxBE,KAAK,SAAAC,GAMGA,OALFA,EAASC,IACZC,QAAQC,OAAO,IAAIC,MAASJ,GAAAA,OAAAA,EAASK,OAAUL,KAAAA,OAAAA,EAASM,cAInDN,EAASO,UAIhBC,EAAY,WAAMZ,OAAAA,EAAN,iBACZa,EAAoB,SAACC,GAAYd,OAAAA,EAAmBc,WAAAA,OAAAA,EAAhC,WAE1B,SAASC,EAAeC,EAAcC,EAAQC,GACtCC,IAAAA,EAAMC,SAASC,cAAc,OAC7BC,EAAKF,SAASC,cAAc,MAC5BE,EAAKH,SAASC,cAAc,MAElCF,EAAIK,UAAYR,EAChBM,EAAGG,YAAcR,EACjBE,EAAIO,OAAOJ,GACXH,EAAIO,OAAOH,GAEXL,EAAMS,QAAQ,SAAAC,GACNC,IAAAA,EAAKT,SAASC,cAAc,MAElCQ,EAAGJ,YAAiBG,GAAAA,OAAAA,EAAGE,GAAGC,cAAiBH,KAAAA,OAAAA,EAAGI,MAC9CT,EAAGG,OAAOG,KAGZT,SAASa,KAAKP,OAAOP,GAGvB,IAAMe,EAA0B,WACvBtB,OAAAA,IACJT,KAAK,SAAAgC,GAAO7B,OAAAA,QAAQ8B,KAAKD,EAAIE,IAAI,SAAAC,GAASzB,OAAAA,EAAkByB,EAAMR,UAGjES,EAA0B,WACvB3B,OAAAA,IACJT,KAAK,SAAAgC,GACJ7B,OAAAA,QAAQkC,IAAIL,EAAIE,IAAI,SAAAC,GAASzB,OAAAA,EAAkByB,EAAMR,UAG3DI,IACG/B,KAAK,SAAAsC,GACJC,QAAQC,IAAI,CAACF,IACb1B,EAAe,iBAAkB,iBAAkB,CAAC0B,MAErDG,MAAM,SAAAC,GAASH,OAAAA,QAAQI,KAAK,iBAAkBD,KAEjDN,IACGpC,KAAK,SAAAsC,GACJC,QAAQC,IAAIF,GACZ1B,EAAe,iBAAkB,iBAAkB0B,KAEpDG,MAAM,SAAAC,GAASH,OAAAA,QAAQI,KAAK,iBAAkBD,KAC9CD,MAAM,SAAAC,GAASH,OAAAA,QAAQI,KAAK,iBAAkBD","file":"main.df79ee68.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\n// write code here\r\n\r\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\r\n\r\nconst request = (url) => {\r\n  return fetch(`${BASE_URL}${url}`)\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        Promise.reject(new Error(`${response.status}-${response.statusText}`\r\n        ));\r\n      }\r\n      // console.log(response);\r\n      return response.json();\r\n    });\r\n};\r\n\r\nconst getPhones = () => request(`/phones.json`);\r\nconst getDetailsOfPhone = (phoneId) => request(`/phones/${phoneId}.json`);\r\n\r\nfunction displayMessage(divClassName, header, array) {\r\n  const div = document.createElement('div');\r\n  const h3 = document.createElement('h3');\r\n  const ul = document.createElement('ul');\r\n\r\n  div.className = divClassName;\r\n  h3.textContent = header;\r\n  div.append(h3);\r\n  div.append(ul);\r\n\r\n  array.forEach(el => {\r\n    const li = document.createElement('li');\r\n\r\n    li.textContent = `${el.id.toUpperCase()} ${el.name}`;\r\n    ul.append(li);\r\n  });\r\n\r\n  document.body.append(div);\r\n};\r\n\r\nconst getFirstReceivedDetails = () => {\r\n  return getPhones()\r\n    .then(arr => Promise.race(arr.map(phone => getDetailsOfPhone(phone.id))));\r\n};\r\n\r\nconst getAllSuccessfulDetails = () => {\r\n  return getPhones()\r\n    .then(arr =>\r\n      Promise.all(arr.map(phone => getDetailsOfPhone(phone.id))));\r\n};\r\n\r\ngetFirstReceivedDetails()\r\n  .then(result => {\r\n    console.log([result]);\r\n    displayMessage('first-received', 'First Received', [result]);\r\n  })\r\n  .catch(error => console.warn('Error occured:', error));\r\n\r\ngetAllSuccessfulDetails()\r\n  .then(result => {\r\n    console.log(result);\r\n    displayMessage('all-successful', 'All Successful', result);\r\n  })\r\n  .catch(error => console.warn('Error occured:', error))\r\n  .catch(error => console.warn('Error occured:', error));\r\n"]}